#include<iostream>
#include<vector>
#include<cstring>
using namespace std;
vector<int> work[21];
long long int dp[1048577][21];
int maskFull;
int n;
long long int count(int mask,int p)
{
	if(mask==maskFull)
		return 1;
	if(p>n)
		return 0;
	if(dp[mask][p]!=-1)
		return dp[mask][p];
		
	long long int ways=0;
	//ways=count(mask,p+1);
	for(int i=0;i<work[p].size();i++)
	{
		if(mask&(1<<(work[p][i]-1)))
			continue;
		ways+=count(mask|(1<<(work[p][i]-1)),p+1);
	}
	return dp[mask][p]=ways;
}



int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		cin>>n;
		memset(dp,-1,sizeof(dp));
		for(int i=1;i<=n;i++)
		{
			work[i].clear();
		}
		for(int i=1;i<=n;i++)
		{
			for(int j=1;j<=n;j++)
			{
				int c;
				cin>>c;
				if(c==1)
				{
					work[j].push_back(i);
				}
				
			}
		}
		
		maskFull=(1<<n)-1;
		cout<<count(0,1)<<endl;
	/**	for(int i=0;i<=(1<<n)-1;i++)
		{
			for(int j=1;j<=n;j++)
			{
				cout<<dp[i][j]<<" ";
			}
			cout<<endl;
		}   **/
		
	}
}